/*
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>


// LAYERS
// ====================================================
#define BASE    	0
#define NUMBERS 	1
#define NAVIGATION 	2
#define HFREQ 		3
#define LFREQ 		4
#define CUSTOM 		5
#define EXTRA		6
#define BLE			7


// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };
// Sticky Layer Behavior - release sticky behavior after x ms
&sk { release-after-ms = <1800>; };

// TAIPO DEFINITIONS (use in conjunction with TAIPO COMBOS)
// ====================================================
// ZMK forces you to define combos in terms of HW key positions
/*
	.-----------------------------------------------------------.
	|  0  |  1  |  2  |  3  |           |  4  |  5  |  6  |  7  |
	|  8  |  9  |  10 |  11 |           |  12 |  13 |  14 |  15 |
	|  16 |-----|  17 |  18 |           |  19 |  20 |-----|  21 |
	'-----'     '-----------------------------------'     '-----'
*/
// {Top,Bottom}{Left,Right}{Index,Middle,Ring,Pinky}

// LEFT SIDE
// Top
#define LTI 3  // Index
#define LTM 2  // Middle
#define LTR 1  // Ring
#define LTP 0  // Pinky
// Bottom
#define LBI 11 // Index
#define LBM 10 // Middle
#define LBR 9  // Ring
#define LBP 8  // Pinky

// RIGHT SIDE
// Top
#define RTI 4  // Index
#define RTM 5  // Middle
#define RTR 6  // Ring
#define RTP 7  // Pinky
// Bottom
#define RBI 12 // Index
#define RBM 13 // Middle
#define RBR 14 // Ring
#define RBP 15 // Pinky

// BEHAVIOR
// ====================================================

/{
	behaviors {
		// Enables holding the first mod-tap key
		// by performing a tap-release-hold sequence.
		// To use it: "&qt KEYCODE1 KEYCODE2"
		qt: quick_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "QUICK_TAP";
			#binding-cells = <2>;
			flavor = "hold-preferred";
			tapping-term-ms = <200>;
			quick-tap-ms = <200>;
			bindings = <&kp>, <&kp>;
		};
	};


// COMBOS
// ====================================================
/*
	.-----------------------------------------------------------.
	|  0  |  1  |  2  |  3  |           |  4  |  5  |  6  |  7  |
	|  8  |  9  |  10 |  11 |           |  12 |  13 |  14 |  15 |
	|  16 |-----|  17 |  18 |           |  19 |  20 |-----|  21 |
	'-----'     '-----------------------------------'     '-----'
*/
// ARTSEY COMBOS
// name of the combo, output of the combo, input for the combo, applied on which layers
	#define COMBO(NAME, BINDINGS, KEYPOS, LAYER) \
	combo_##NAME { \
		timeout-ms = <120>; \
		bindings = <BINDINGS>; \
		key-positions = <KEYPOS>; \
		layers = <LAYER>; \
	};

   combos {
        compatible = "zmk,combos";
		// LEFT SIDE
		/***************
		* 2 key combos
		****************/
		COMBO(L1,&kp ENTER,LTI LBI,0 1 2 3 4 5 6)		// ENTER
		COMBO(L2,&sk LCTRL,LBI LTP, 0 1 2 3 4 5 6)		// LCTRL *oneshot
		COMBO(L3,&sk LGUI,LBM LTP, 0 1 2 3 4 5 6)		// LGUI  *oneshot
		COMBO(L4,&sk RALT,LBR LTP, 0 1 2 3 4 5 6)		// RALT  *oneshot
		COMBO(L5,&kp BACKSPACE,LBI LTM, 0 1 2 3 4 5 6)		// BACKSPACE
		COMBO(L6,&kp DELETE,LBR LTM, 0 1 2 3 4 5 6)		// DELETE
		COMBO(L7,&kt LSHFT,LBM LTM, 0 1 2 3 4 5 6)		// LSHIFT #toggle

		COMBO(L8,&kp B,LBI LBP, 0)				// B
		COMBO(L9,&kp C,LBI LBM, 0)				// C
		COMBO(L10,&kp N,LBP LBR, 0)				// N
		COMBO(L11,&kp F,LTM LTI, 0)				// F
		COMBO(L12,&kp G,LTR LTM, 0)				// G
		COMBO(L13,&kp U,LBR LBM, 0)				// U
		COMBO(L14,&kp H,LBI LBR, 0)				// H
		COMBO(L15,&kp V,LTP LTM, 0)				// V
		COMBO(L16,&kp J,LTP LTR, 0)				// J
		COMBO(L17,&kp W,LTP LTI, 0)				// W
		COMBO(L18,&kp K,LBP LBM, 0)				// K

		COMBO(L19,&kp PERIOD,LBM LTI, 0 1)			// PERIOD
		COMBO(L20,&kp COMMA,LBR LTI, 0 1)			// COMMA
		COMBO(L21,&kp SLASH,LBP LTI, 0 1)			// SLASH
		COMBO(L22,&kp EXCL,LTR LBR, 0 1)				// EXCLAMATION

		COMBO(L23,&kp N7,LTR LTM, 1)				// 7
		COMBO(L24,&kp N8,LTM LTI, 1)				// 8
		COMBO(L25,&kp N9,LBR LBM, 1)				// 9
		COMBO(L26,&kp N0,LBM LBI, 1)				// 0

		/***************
		* 3 key combos
		****************/
		COMBO(L27,&kp ESC,LTI LTM LBP,0 1 2 3 4 5 6)			// ESC
		COMBO(L28,&to NAVIGATION,LBR LTM LBI,0 1 2 3 4 5 6)		// LAYER: NAVIGATION >to
		COMBO(L29,&kp CAPS,LBP LTR LBM,0 1 2 3 4 5 6)			// CAPS

		COMBO(L30,&kp M,LBP LBR LBM,0)
		COMBO(L31,&kp D,LTR LTM LTI,0)
		COMBO(L32,&kp P,LBP LBR LBI,0)
		COMBO(L33,&kp Q,LTP LTR LTI,0)
		COMBO(L34,&kp X,LTP LTR LTM,0)
		COMBO(L35,&kp L,LBR LBM LBI,0)
		COMBO(L36,&kp SQT,LBR LBM LTI,0)

		/***************
		* 4 key combos
		****************/
		COMBO(L37,&kp Y,LBP LBR LBM LBI,0)				// Y
		COMBO(L38,&kp Z,LTP LTR LTM LTI,0)				// Z

		COMBO(L39,&kp TAB,LBP LTR LTM LTI,0 1 2 3 4 5 6)			// TAB
		COMBO(L40,&to BASE,LTP LTR LTM LBI,0 1 2 3 4 5 6)		// LAYER: BASE >to
		COMBO(L41,&tog BLE,LTP LBP LTI LBI,0 1 2 3 4 5 6)		// LAYER: BLUETOOTH #toggle
		COMBO(L42,&to NUMBERS,LTR LTM LBR LBM,0 1 2 3 4 5 6)		// LAYER: NUMBERS >to
		COMBO(L43,&to BASE,LTP LTR LBP LBR,0 1 2 3 4 5 6)		// LAYER: BASE (Fallback) >to

		// RIGHT SIDE
		/***************
		* 2 key combos
		****************/
		COMBO(R1,&kp ENTER,RTI RBI,0 1 2 3 4 5 6)		// ENTER
		COMBO(R2,&sk LCTRL,RBI RTP, 0 1 2 3 4 5 6)		// LCTRL *oneshot
		COMBO(R3,&sk LGUI,RBM RTP, 0 1 2 3 4 5 6)		// LGUI  *oneshot
		COMBO(R4,&sk RALT,RBR RTP, 0 1 2 3 4 5 6)		// RALT  *oneshot
		COMBO(R5,&kp BACKSPACE,RBI RTM, 0 1 2 3 4 5 6)		// BACKSPACE
		COMBO(R6,&kp DELETE,RBR RTM, 0 1 2 3 4 5 6)		// DELETE
		COMBO(R7,&kt LSHFT,RBM RTM, 0 1 2 3 4 5 6)		// LSHIFT #toggle

		COMBO(R8,&kp B,RBI RBP, 0)				// B
		COMBO(R9,&kp C,RBI RBM, 0)				// C
		COMBO(R10,&kp N,RBP RBR, 0)				// N
		COMBO(R11,&kp F,RTM RTI, 0)				// F
		COMBO(R12,&kp G,RTR RTM, 0)				// G
		COMBO(R13,&kp U,RBR RBM, 0)				// U
		COMBO(R14,&kp H,RBI RBR, 0)				// H
		COMBO(R15,&kp V,RTP RTM, 0)				// V
		COMBO(R16,&kp J,RTP RTR, 0)				// J
		COMBO(R17,&kp W,RTP RTI, 0)				// W
		COMBO(R18,&kp K,RBP RBM, 0)				// K

		COMBO(R19,&kp PERIOD,RBM RTI, 0 1)			// PERIOD
		COMBO(R20,&kp COMMA,RBR RTI, 0 1)			// COMMA
		COMBO(R21,&kp SLASH,RBP RTI, 0 1)			// SLASH
		COMBO(R22,&kp EXCL,RTR RBR, 0 1)				// EXCLAMATION

		COMBO(R23,&kp N7,RTR RTM, 1)				// 7
		COMBO(R24,&kp N8,RTM RTI, 1)				// 8
		COMBO(R25,&kp N9,RBR RBM, 1)				// 9
		COMBO(R26,&kp N0,RBM RBI, 1)				// 0

		/***************
		* 3 key combos
		****************/
		COMBO(R27,&kp ESC,RTI RTM RBP,0 1 2 3 4 5 6)			// ESC
		COMBO(R28,&to NAVIGATION,RBR RTM RBI,0 1 2 3 4 5 6)		// LAYER: NAVIGATION >to
		COMBO(R29,&kp CAPS,RBP RTR RBM,0 1 2 3 4 5 6)			// CAPS

		COMBO(R0,&kp M,RBP RBR RBM,0)
		COMBO(R31,&kp D,RTR RTM RTI,0)
		COMBO(R32,&kp P,RBP RBR RBI,0)
		COMBO(R33,&kp Q,RTP RTR RTI,0)
		COMBO(R34,&kp X,RTP RTR RTM,0)
		COMBO(R35,&kp L,RBR RBM RBI,0)
		COMBO(R36,&kp SQT,RBR RBM RTI,0)

		/***************
		* 4 key combos
		****************/
		COMBO(R37,&kp Y,RBP RBR RBM RBI,0)				// Y
		COMBO(R38,&kp Z,RTP RTR RTM RTI,0)				// Z

		COMBO(R39,&kp TAB,RBP RTR RTM RTI,0 1 2 3 4 5 6)			// TAB
		COMBO(R40,&to BASE,RTP RTR RTM RBI,0 1 2 3 4 5 6)		// LAYER: BASE >to
		COMBO(R41,&tog BLE,RTP RBP RTI RBI,0 1 2 3 4 5 6)		// LAYER: BLUETOOTH #toggle
		COMBO(R42,&to NUMBERS,RTR RTM RBR RBM,0 1 2 3 4 5 6)		// LAYER: NUMBERS >to
		COMBO(R43,&to BASE,RTP RTR RBP RBR,0 1 2 3 4 5 6)		// LAYER: BASE (Fallback) >to
   };

// KEYMAP
// ====================================================

/*  0 = Base
	.-----------------------------------------------------------.
	|  R  |  S  |  N  |  I  |           |  I  |  N  |  S  |  R  |
	|  A  |  O  |  T  |  E  |           |  E  |  T  |  O  |  A  |
	|     |-----| BKSP| SPC |           | SPC | BKSP|-----|     |
	'-----'     '-----------------------------------'     '-----'
*/
	keymap {
		compatible = "zmk,keymap";

		// LAYER: BASE 0
		default_layer {
			label = "Base";
			bindings = <
			&lt CUSTOM S	&kp T       &kp R       &lt HFREQ A    &lt HFREQ A &kp R       &kp T       &lt CUSTOM S
			&lt EXTRA O		&kp I       &kp SPACE   &lt LFREQ E    &lt LFREQ E &kp SPACE   &kp I       &lt EXTRA O
			&kp RALT                  	&kp BKSP    &kp LSHIFT     &kp LSHIFT  &kp BKSP                &kp RALT
			>;
		};

// -----------------------------------------------------------------------------

/*  1 = Bluetooth
	.-----------------------------------------------------------.
	|  0  |  1  |  2  |  3  |           |  4  |  5  |  6  |  7  |
	|  8  |  9  |  10 |  11 |           |  12 |  13 |  14 |  15 |
	|  16 |-----|  17 |  18 |           |  19 |  20 |-----|  21 |
	'-----'     '-----------------------------------'     '-----'
*/
        // LAYER: NUMBERS 1
		numbers_layer {
			label = "Numbers";
			bindings = <
			&kp PLUS    &kp N4      &kp N5      &kp N6         &kp N4      &kp N5      &kp N6      &kp PLUS
			&kp MINUS   &kp N1      &kp N2      &kp N3         &kp N1      &kp N2      &kp N3      &kp MINUS
			&to BASE                &kp PERIOD  &kp LSHIFT     &kp LSHIFT  &kp PERIOD              &to BASE     
			>;
		};
// -----------------------------------------------------------------------------

/*  2 = Navigation
	.-----------------------------------------------------------.
	|  0  |  1  |  2  |  3  |           |  4  |  5  |  6  |  7  |
	|  8  |  9  |  10 |  11 |           |  12 |  13 |  14 |  15 |
	|  16 |-----|  17 |  18 |           |  19 |  20 |-----|  21 |
	'-----'     '-----------------------------------'     '-----'
*/
        // LAYER: NAVIGATION 2
		navigation_layer {
			label = "Navigation";
			bindings = <
			&kp LC(PG_UP) &kp HOME  &kp UP      &kp END        &kp END     &kp UP      &kp HOME    &kp LC(PG_UP)
			&kp LC(PG_DN) &kp LEFT  &kp DOWN    &kp RIGHT      &kp LEFT    &kp DOWN    &kp RIGHT   &kp LC(PG_DN)
			&to BASE                &kp LCTRL   &kp LSHIFT     &kp LSHIFT  &kp LCTRL               &to BASE     
			>;
		};
// -----------------------------------------------------------------------------

/*  3 = High Frequency
	.-----------------------------------------------------------.
	|  0  |  1  |  2  |  3  |           |  4  |  5  |  6  |  7  |
	|  8  |  9  |  10 |  11 |           |  12 |  13 |  14 |  15 |
	|  16 |-----|  17 |  18 |           |  19 |  20 |-----|  21 |
	'-----'     '-----------------------------------'     '-----'
*/
        // LAYER: HFREQ 3
		hfreq_layer {
			label = "HFreq";
			bindings = <
			&sk RALT    &kp LPAR  &kp RPAR    &none        &none       &kp LPAR    &kp RPAR   &sk RALT 
			&sk LSHFT   &kp LBKT  &kp RBKT    &kp PIPE     &kp PIPE    &kp LBKT    &kp RBKT   &sk LSHFT
			&to BASE              &kp LCTRL   &kp LSHIFT   &kp LSHIFT  &kp LCTRL              &to BASE     
			>;
		};
// -----------------------------------------------------------------------------

/*  4 = High Frequency
	.-----------------------------------------------------------.
	|  0  |  1  |  2  |  3  |           |  4  |  5  |  6  |  7  |
	|  8  |  9  |  10 |  11 |           |  12 |  13 |  14 |  15 |
	|  16 |-----|  17 |  18 |           |  19 |  20 |-----|  21 |
	'-----'     '-----------------------------------'     '-----'
*/
        // LAYER: LFREQ 4
		lfreq_layer {
			label = "LFreq";
			bindings = <
			&kp GRAVE   &kp SEMI    &kp COLON   &kp BSLH    &kp BSLH    &kp COLON   &kp SEMI   &sk GRAVE 
			&kp EXCL    &kp MINUS   &kp QMARK   &none       &none       &kp QMARK   &kp MINUS  &sk EXCL
			&to BASE              &kp LCTRL   &kp LSHIFT    &kp LSHIFT  &kp LCTRL              &to BASE     
			>;
		};
// -----------------------------------------------------------------------------

/*  5 = Custom
	.-----------------------------------------------------------.
	|  0  |  1  |  2  |  3  |           |  4  |  5  |  6  |  7  |
	|  8  |  9  |  10 |  11 |           |  12 |  13 |  14 |  15 |
	|  16 |-----|  17 |  18 |           |  19 |  20 |-----|  21 |
	'-----'     '-----------------------------------'     '-----'
*/
        // LAYER: CUSTOM 5
		custom_layer {
			label = "Custom";
			bindings = <
			&none  		&kp LS(LT)    	&kp LS(GT)     	&sk LALT        &sk LALT    &kp LS(GT)   &kp LS(LT)     &none
			&sk LGUI	&kp C_VOL_DN    &kp C_VOL_UP    &kp C_MUTE      &kp C_MUTE  &kp C_VOL_UP &kp C_VOL_DN   &sk LGUI
			&to BASE                    &kp LCTRL       &kp LSHIFT      &kp LSHIFT  &kp LCTRL                   &to BASE     
			>;
		};
// -----------------------------------------------------------------------------

/*  6 = Extras
	.-----------------------------------------------------------.
	|  0  |  1  |  2  |  3  |           |  4  |  5  |  6  |  7  |
	|  8  |  9  |  10 |  11 |           |  12 |  13 |  14 |  15 |
	|  16 |-----|  17 |  18 |           |  19 |  20 |-----|  21 |
	'-----'     '-----------------------------------'     '-----'
*/
        // LAYER: EXTRA 6
		extra_layer {
			label = "Extra";
			bindings = <
			&none		&kp COMMA  	    &kp PERIOD	&kp BACKSPACE           &kp BACKSPACE       &kp PERIOD    &kp COMMA     &none
			&none 		&kp LC(DEL) 	&kp DEL 	&kp LC(BACKSPACE)       &kp LC(BACKSPACE)   &kp DEL       &kp LC(DEL)   &none
			&to BASE                    &kp LCTRL   &kp LSHIFT              &kp LSHIFT  &kp LCTRL                           &to BASE     
			>;
		};
// -----------------------------------------------------------------------------

/*  7 = Bluetooth
	.-----------------------------------------------------------.
	|  0  |  1  |  2  |  3  |           |  4  |  5  |  6  |  7  |
	|  8  |  9  |  10 |  11 |           |  12 |  13 |  14 |  15 |
	|  16 |-----|  17 |  18 |           |  19 |  20 |-----|  21 |
	'-----'     '-----------------------------------'     '-----'
*/
        // LAYER: BLUETOOTH 7
		ble_layer {
			label = "BLE";
			bindings = <
			&bt BT_NXT       &bt BT_SEL 1   &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 1     &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_NXT
			&bt BT_PRV       &sys_reset    	&bootloader	 &bt BT_CLR           &bt BT_CLR       &bootloader     &sys_reset      &bt BT_PRV 
			&to BASE                        &kp LCTRL   &kp LSHIFT            &kp LSHIFT       &kp LCTRL                       &to BASE     
			>;
		};
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
    };
};